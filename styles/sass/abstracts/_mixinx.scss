@use "variables" as variable;

@mixin media($breakpoint) {
  @if $breakpoint == "xs" {
    @media (min-width: map-get(variable.$grid-breakpoints, xs)) {
      @content;
    }
  } @else if $breakpoint == "sm" {
    @media (min-width: map-get(variable.$grid-breakpoints, sm)) {
      @content;
    }
  } @else if $breakpoint == "md" {
    @media (min-width: map-get(variable.$grid-breakpoints, md)) {
      @content;
    }
  } @else if $breakpoint == "lg" {
    @media (min-width: map-get(variable.$grid-breakpoints, lg)) {
      @content;
    }
  } @else if $breakpoint == "xl" {
    @media (min-width: map-get(variable.$grid-breakpoints, xl)) {
      @content;
    }
  } @else if $breakpoint == "xxl" {
    @media (min-width: map-get(variable.$grid-breakpoints, xxl)) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint: #{$breakpoint}.";
  }
}

@mixin container {
//   width: 100%;
  margin: 0 auto;
  padding: 0 25px;
  
  @include media("sm") {
    max-width: calc(map-get(variable.$grid-breakpoints, sm) - 10px);
  }
  
  @include media("md") {
    max-width: calc(map-get(variable.$grid-breakpoints, md) - 10px);
  }
  
  @include media("lg") {
    max-width: calc(map-get(variable.$grid-breakpoints, lg) - 10px);
  }
  
  @include media("xl") {
    max-width: calc(map-get(variable.$grid-breakpoints, xl) - 10px);
  }
  
  @include media("xxl") {
    max-width: calc(map-get(variable.$grid-breakpoints, xxl) - 10px);
  }
}

.container {
  @include container();
}

%grid {
  display: grid;
}

$valor_gap: 8,10,14,15,16,20,24,32,36,40,48,64,96,128;

@for $i from 1 through 5 {
  $columns: 1 * $i;

  .grid-#{$i} {
    @extend %grid;
    grid-template-columns: repeat(#{$i}, 1fr);
  }

  @each $breakpoint, $value in variable.$grid-breakpoints {
    @include media($breakpoint) {
      .grid-#{$breakpoint}-#{$i} {
        grid-template-columns: repeat(#{$i}, 1fr);
      }
    }
  }
}

@each $size in $valor_gap {
  @each $breakpoint, $value in  variable.$grid-breakpoints {
    @include media($breakpoint) {
      .gap-#{$size}-#{$breakpoint} {
        gap: #{$size}px;
      }
    }
  }
}
